layout_mamba() {
  # Modified from layout_anaconda
  local env_spec=$1
  local env_name
  local env_loc
  local env_config
  local mamba
  local REPLY
  if [[ $# -gt 1 ]]; then
    mamba=${2}
  else
    mamba=$(command -v mamba)
  fi
  realpath.dirname "$mamba"
  PATH_add "$REPLY"

  if [[ "${env_spec##*.}" == "yaml" ]]; then
    env_config=$env_spec
  elif [[ "${env_spec%%/*}" == "." ]]; then
    # "./foo" relative prefix
    realpath.absolute "$env_spec"
    env_loc="$REPLY"
  elif [[ ! "$env_spec" == "${env_spec#/}" ]]; then
    # "/foo" absolute prefix
    env_loc="$env_spec"
  elif [[ -n "$env_spec" ]]; then
    # "name" specified
    env_name="$env_spec"
  else
    # Need at least one
    env_config=environment.yaml
  fi

  # If only config, it needs a name field
  if [[ -n "$env_config" ]]; then
    if [[ -e "$env_config" ]]; then
      env_name="$(grep -- '^name:' "$env_config")"
      env_name="${env_name/#name:*([[:space:]])/}"
      if [[ -z "$env_name" ]]; then
        log_error "Unable to find 'name' in '$env_config'"
        return 1
      fi
    else
      log_error "Unable to find config '$env_config'"
      return 1
    fi
  fi

  # Try to find location based on name
  if [[ -z "$env_loc" ]]; then
    # Update location if already created
    env_loc=$("$mamba" env list | grep -- "$env_name" | xargs)
    env_loc="${env_loc##* }"
  fi

  # Check for environment existence
  if [[ ! -d "$env_loc" ]]; then
    # Create if necessary
    if [[ -z "$env_config" ]] && [[ -n "$env_name" ]]; then
      if [[ -e environment.yaml ]]; then
        "$mamba" env create --file environment.yaml --name "$env_name"
      else
        "$mamba" create -y --name "$env_name"
      fi
    elif [[ -n "$env_config" ]]; then
      "$mamba" env create --file "$env_config"
    elif [[ -n "$env_loc" ]]; then
      if [[ -e environment.yaml ]]; then
        "$mamba" env create --file environment.yaml --prefix "$env_loc"
      else
        "$mamba" create -y --prefix "$env_loc"
      fi
    fi

    if [[ -z "$env_loc" ]]; then
      # Update location if already created
      env_loc=$("$mamba" env list | grep -- "$env_name" | xargs)
      env_loc="${env_loc##* }"
    fi
  fi

  eval "$("$mamba" shell activate "$env_loc")"
}

layout_conda() {
    layout_anaconda "$@"
}

# https://github.com/direnv/direnv/wiki/Python
layout_pdm() {
    PYPROJECT_TOML="${PYPROJECT_TOML:-pyproject.toml}"
    if [ ! -f "$PYPROJECT_TOML" ]; then
        log_status "No pyproject.toml found. Executing \`pmd init\` to create a \`$PYPROJECT_TOML\` first."
        pdm init --non-interactive --python "$(python3 --version 2>/dev/null | cut -d' ' -f2 | cut -d. -f1-2)"
    fi

    VIRTUAL_ENV=$(pdm venv list | grep "^\*"  | awk -F" " '{print $3}')


    if [ -z "$VIRTUAL_ENV" ] || [ ! -d "$VIRTUAL_ENV" ]; then
        log_status "No virtual environment exists. Executing \`pdm info\` to create one."
        pdm info
        VIRTUAL_ENV=$(pdm venv list | grep "^\*"  | awk -F" " '{print $3}')
    fi

    PATH_add "$VIRTUAL_ENV/bin"
    export PDM_ACTIVE=1  # or VENV_ACTIVE=1
    export VIRTUAL_ENV
}

layout_uv() {
    if [[ -d ".venv" ]]; then
        VIRTUAL_ENV="$(pwd)/.venv"
    fi

    if [[ -z $VIRTUAL_ENV || ! -d $VIRTUAL_ENV ]]; then
        log_status "No virtual environment exists. Executing \`uv venv\` to create one."
        uv venv
        VIRTUAL_ENV="$(pwd)/.venv"
    fi

    PATH_add "$VIRTUAL_ENV/bin"
    export UV_ACTIVE=1  # or VENV_ACTIVE=1
    export VIRTUAL_ENV
}
