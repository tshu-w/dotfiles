# -*- mode: sh -*-
setopt no_global_rcs

export LANG=en_US.UTF-8
export LC_ALL=C.UTF-8

: ${XDG_CACHE_HOME:=~/.cache}
: ${XDG_CONFIG_HOME:=~/.config}
: ${XDG_DATA_HOME:=~/.local/share}
: ${XDG_STATE_HOME:=~/.local/state}
export XDG_CONFIG_HOME XDG_CACHE_HOME XDG_DATA_HOME XDG_STATE_HOME

ZDOTDIR=$XDG_CONFIG_HOME/zsh

export PATH=$HOME/.local/bin:/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/sbin
export MANPATH=$HOME/.local/share/man:/usr/local/share/man:/usr/share/man
export INFOPATH=$HOME/.local/share/info:/usr/local/share/info:/usr/share/info

case $VENDOR in
  ( apple )
    export SHELL_SESSIONS_DISABLE=1

    { [ -f /usr/local/bin/brew ] && eval $(/usr/local/bin/brew shellenv) } || \
        { [ -f /opt/homebrew/bin/brew ] && eval $(/opt/homebrew/bin/brew shellenv) }

    for pkg in "coreutils" "findutils" "gawk" "gnu-sed" "gnu-tar" "grep"; do
        export PATH=$HOMEBREW_PREFIX/opt/$pkg/libexec/gnubin:$PATH
    done

    export FPATH=$HOMEBREW_PREFIX/share/zsh/site-functions:$FPATH

    export PATH=$PATH:/Library/TeX/Distributions/Programs/texbin
    export MANPATH=$MANPATH:`readlink -f /Library/TeX/Distributions/Programs/texbin/man`

    export GITPERLLIB=/Library/Developer/CommandLineTools/usr/share/git-core/perl
  ;;
  ( ubuntu )
    export skip_global_compinit=1
    export LANGUAGE=en

    [ -d /home/linuxbrew/.linuxbrew ] && eval $(/home/linuxbrew/.linuxbrew/bin/brew shellenv)
    [ -d $XDG_DATA_HOME/linuxbrew ] && eval $($XDG_DATA_HOME/linuxbrew/bin/brew shellenv)

    export FPATH=$HOMEBREW_PREFIX/share/zsh/site-functions:$FPATH

    export NPM_CONFIG_PREFIX=$HOME/.local
  ;;
esac

[ -n "$SSH_CLIENT" ] || [ -n "$SSH_TTY" ] || export VISUAL=emacsclient
[[ $OSTYPE == linux-gnu ]] && export DEBIAN_PREVENT_KEYBOARD_CHANGES=1

export BUNDLE_USER_CONFIG=$XDG_CONFIG_HOME/bundle
export BUNDLE_USER_CACHE=$XDG_CACHE_HOME/bundle
export BUNDLE_USER_PLUGIN=$XDG_DATA_HOME/bundle
export GEM_HOME=$XDG_DATA_HOME/gem
export GEM_SPEC_CACHE=$XDG_CACHE_HOME/gem
export GNUPGHOME=$XDG_CONFIG_HOME/gnupg
export IPYTHONDIR=$XDG_CONFIG_HOME/ipython
export JUPYTER_CONFIG_DIR=$XDG_CONFIG_HOME/jupyter
export MACHINE_STORAGE_PATH=$XDG_DATA_HOME/docker-machine
export MAMBARC=$XDG_CONFIG_HOME/mamba/mambarc
export MAMBA_ROOT_PREFIX=${XDG_DATA_HOME}/mamba
export NPM_CONFIG_USERCONFIG=$XDG_CONFIG_HOME/npm/npmrc
export PIPX_HOME=$XDG_DATA_HOME/pipx
export PYTHONSTARTUP=$XDG_CONFIG_HOME/python/pythonrc
export PYTHONPATH=$XDG_CONFIG_HOME/python${PYTHONPATH:+":$PYTHONPATH"}
export RIPGREP_CONFIG_PATH=$XDG_CONFIG_HOME/ripgrep/ripgreprc
export RUFF_CACHE_DIR=$XDG_CACHE_HOME/ruff
export UNISON=$XDG_CONFIG_HOME/unison
export VIMINIT="set nocp | source $XDG_CONFIG_HOME/vim/vimrc"
export LESSHISTFILE=-

export GPG_TTY=$(tty)
if [ "${gnupg_SSH_AUTH_SOCK_by:-0}" -ne $$ ]; then
    export SSH_AUTH_SOCK="$(gpgconf --list-dirs agent-ssh-socket)"
    [ -S $SSH_AUTH_SOCK ] || gpgconf --launch gpg-agent
fi

### Emacs Related Functions
ec () {
    # Preferred edit file at local emacs via tramp
    if [ -n "$SSH_CLIENT" ] || [ -n "$SSH_TTY" ]; then
        [ -z $hostname ] && export hostname=`cat $XDG_CACHE_HOME/hostname`
        for arg in "$@"; do
            [[ "$arg" != -* ]] && set -- "$@" /ssh:"$hostname":$(readlink -f -- "$arg") || set -- "$@" "$arg"
            shift
        done
    fi

    test "$#" -eq "0" || emacsclient -n "$@"
    emacsclient -eu "(select-frame-set-input-focus (selected-frame))"
}
ef () { emacsclient -cn "$@" && emacsclient -eu "(select-frame-set-input-focus (selected-frame))" }
es () { emacsclient -e "(save-buffers-kill-emacs)" &> /dev/null && echo "Emacs server is down" || echo "Emacs server not running" }
et () { emacsclient -a "" -t "$@" }
